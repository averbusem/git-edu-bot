from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from src.bot.keyboards.user_keyboards import (answer_keyboard, menu_keyboard,
                                              start_test_keyboard)
from src.bot.states.test_states import Test1State
from src.bot.utils.test_formatter import (format_question_summary,
                                          format_question_text)

TEST_NAME = "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Git"
OPTIONS = ["A", "B", "C", "D"]
QUESTIONS = {
    "question1": {
        "question": "üìå 1. –ß—Ç–æ —Ç–∞–∫–æ–µ Git?",
        "options": {
            "A": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            "B": "–†–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏",
            "C": "–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
            "D": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        },
        "correct": "B"
    },
    "question2": {
        "question": "üìå 2. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–µ—Ç Git?",
        "options": {
            "A": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–Ω–µ—Å—ë–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏",
            "B": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Ñ–∞–π–ª–æ–≤",
            "C": "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
            "D": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º"
        },
        "correct": "A"
    },
    "question3": {
        "question": "üìå 3. –ü–æ—á–µ–º—É Git —Ç–∞–∫ –ø–æ–ø—É–ª—è—Ä–µ–Ω —Å—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤?",
        "options": {
            "A": "–û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä",
            "B": "–û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–∫—Å–∏—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ",
            "C": "–û–Ω –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "D": "–ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
        },
        "correct": "D"
    },
    "question4": {
        "question": "üìå 4. –ö–∞–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å—Ç–∞–ª–∞ —Ç–æ—á–∫–æ–π –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Git?",
        "options": {
            "A": "–ü—Ä–æ–±–ª–µ–º—ã —Å BitKeeper",
            "B": "–û—Ç–∫–∞–∑ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
            "C": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º",
            "D": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –æ–±–ª–∞—á–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        },
        "correct": "A"
    },
    "question5": {
        "question": "üìå 5. –ß—Ç–æ —Ç–∞–∫–æ–µ \"—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\"?",
        "options": {
            "A": "–•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            "B": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞",
            "C": "–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "D": "–°—Ä–µ–¥–∞ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–¥–∞"
        },
        "correct": "A"
    },
    "question6": {
        "question": "üìå 6. –ß—Ç–æ —Ç–∞–∫–æ–µ \"–≤–µ—Ç–∫–∞\"?",
        "options": {
            "A": "–ö–æ–ø–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
            "B": "–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            "C": "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞",
            "D": "–§–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        },
        "correct": "B"
    },
    "question7": {
        "question": "üìå 7. –ß—Ç–æ —Ç–∞–∫–æ–µ \"–∫–æ–º–º–∏—Ç\"?",
        "options": {
            "A": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤",
            "B": "–ü—Ä–æ—Ü–µ—Å—Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ç–æ–∫ –≤ –æ–¥–Ω—É",
            "C": "–§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏",
            "D": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ —Ñ–∞–π–ª–æ–≤"
        },
        "correct": "C"
    }
}

router = Router()


@router.callback_query(F.data == "test1")
async def test1_selected(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(Test1State.QUESTION1)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: <b>{TEST_NAME}</b>\n\n"
        "üìù –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=start_test_keyboard(),
    )


@router.callback_query(F.data == "start_test", Test1State.QUESTION1)
async def send_test_question1(callback_query: CallbackQuery, state: FSMContext):
    question_data = QUESTIONS["question1"]
    text = format_question_text(question_data)
    await callback_query.message.edit_text(text, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION1)
async def handle_test_answer1(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question1"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∑–∞–ø–∏—Å–∞—Ç—å True, –∏–Ω–∞—á–µ False.
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION2)
    question2_data = QUESTIONS["question2"]
    text2 = format_question_text(question2_data)
    await callback_query.message.answer(text2, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION2)
async def handle_test_answer2(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question2"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 2
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION3)
    question3_data = QUESTIONS["question3"]
    text3 = format_question_text(question3_data)
    await callback_query.message.answer(text3, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION3)
async def handle_test_answer3(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question3"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 3
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION4)
    question4_data = QUESTIONS["question4"]
    text4 = format_question_text(question4_data)
    await callback_query.message.answer(text4, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION4)
async def handle_test_answer4(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question4"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 4
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION5)
    question5_data = QUESTIONS["question5"]
    text5 = format_question_text(question5_data)
    await callback_query.message.answer(text5, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION5)
async def handle_test_answer5(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question5"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 5
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION6)
    question6_data = QUESTIONS["question6"]
    text6 = format_question_text(question6_data)
    await callback_query.message.answer(text6, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION6)
async def handle_test_answer6(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question6"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 6
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    await state.set_state(Test1State.QUESTION7)
    question7_data = QUESTIONS["question7"]
    text7 = format_question_text(question7_data)
    await callback_query.message.answer(text7, reply_markup=answer_keyboard())


@router.callback_query(F.data.in_(OPTIONS), Test1State.QUESTION7)
async def handle_test_answer7(callback_query: CallbackQuery, state: FSMContext):
    user_answer = callback_query.data
    question_data = QUESTIONS["question7"]
    summary_text = format_question_summary(question_data, user_answer)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 7
    # result = True if user_answer == question_data["correct"] else False

    await callback_query.message.edit_text(summary_text)
    # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äì –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await callback_query.message.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
                                        reply_markup=menu_keyboard())
