from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from src.bot.handlers.keyboards.user_keyboards import (answer_keyboard,
                                                       menu_keyboard,
                                                       start_test_keyboard)
from src.bot.utils.test_formatter import (format_question_summary,
                                          format_question_text)
from src.db.database import db


async def process_test_answer(callback_query: CallbackQuery, state: FSMContext, test_number: int,
                              question_key: str, question_number: int, questions: dict,
                              next_state=None, next_question_key: str = None):
    user_answer = callback_query.data
    user_id = callback_query.from_user.id
    results = await state.get_data()
    question_data = questions[question_key]
    summary_text = format_question_summary(question_data, user_answer)

    key = str(question_number)
    if key not in results:
        is_correct = 1 if user_answer == question_data["correct"] else 0
        await db.tick_question_answer(user_id=user_id, test_number=test_number, question_number=question_number,
                                      is_correct=is_correct)
        results[key] = is_correct
        await state.update_data(results)

    await callback_query.message.edit_text(summary_text)
    if next_state and next_question_key:
        await state.set_state(next_state)
        next_data = questions[next_question_key]
        next_text = format_question_text(next_data)
        await callback_query.message.answer(next_text, reply_markup=answer_keyboard())


async def pre_test_state(callback_query: CallbackQuery, state: FSMContext, user_id: int, test_number: int,
                         cur_activity_num: int, test_state, test_name: str,):
    current_activity = await db.get_current_activity(user_id=user_id)
    cur_test = current_activity["test"]
    cur_theory = current_activity["theory"]
    cur_practice = current_activity["practice"]
    if any([cur_theory < cur_activity_num, cur_test <
           cur_activity_num, cur_practice < cur_activity_num]):
        await callback_query.message.edit_text("‚ùóÔ∏è–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫\n\n"
                                               "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å—ë –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–∫–∞—Ö",
                                               reply_markup=menu_keyboard())
    else:
        await state.set_state(test_state.QUESTION1)
        await db.start_test(user_id=user_id, test_number=test_number)
        test_mark = await db.get_test_mark(user_id=user_id, test_number=test_number)
        if test_mark is None:
            await callback_query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: <b>{test_name}</b>\n\n"
                "üìù –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
                "‚ùó –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ—ë —É–∂–µ –Ω–µ–ª—å–∑—è!",
                reply_markup=start_test_keyboard(),
            )
        else:
            await callback_query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: <b>{test_name}</b>\n\n"
                f"üìù –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
                f"‚ùó –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞\n"
                f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ <b>{test_mark}</b>",
                reply_markup=start_test_keyboard(),
            )
